#!/usr/bin/perl -w
use strict;
our $copyright = <<END;
    Copyright 2021 Ian Jackson and contributors
    SPDX-License-Identifier: MIT
    There is NO WARRANTY.
END

use POSIX;
our $src = "src";

#---------- input data and templates ----------

our @chapters;
our ($title, @crate_refs_docs_rs, @crate_refs_crates_io);

do './src/definitions.pl' or die $!;

our $mdbook_refs = <<END;
{{ #include ../$src/refs.md }}
{{ #include autorefs.md }}
END

#---------- output generation functions ----------

# variables that come from the parser
our @sections;

sub summary() {
  start_output("mdbook/SUMMARY.md");
  ol("# $title");
  o_autogen();
  ol(" [Contents](README.md)");
  foreach my $section (@sections) {
    next if $section->[0];
    ol(" - [$section->[2]]($section->[1])");
  }
  end_output();
}

sub contents() {
  start_output("mdbook/README.md");
  ol("# $title");
  o_autogen();
  open P, "src/precontents.md" or die $!;
  while (<P>) { o($_); }
  P->error and die $!;
  close P;
  o(<<END);

## Table of Contents

END

  for my $section (@sections) {
    o("  " x (1 + $section->[0]));
    o(" - [$section->[2]]($section->[1]");
    if ($section->[0]) {
      my $lref = $section->[2];
      $lref =~ s/[^ \w]//g;
      $lref =~ s/ /-/g;
      $lref = lc $lref;
      o("#$lref");
    }
    ol(")");
  }
  o("\n$mdbook_refs");
  end_output();
}

sub autorefs() {
  start_output("mdbook/autorefs.md");
  foreach my $crate (@crate_refs_docs_rs) {
    my $rustc_crate = $crate;
    $rustc_crate =~ y/-/_/;
    ol("[\`$crate`]: https://docs.rs/$crate/latest/$rustc_crate/");
  }
  foreach my $crate (@crate_refs_crates_io) {
    ol("[\`$crate`]: https://crates.io/crates/$crate");
  }
  end_output();
}

sub append_to_colophon ($$) {
  my ($file, $title) = @_;
  ol();
  ol("#### $title (`$file`)");
  ol();
  ol('```');
  open F, "< $file" or die $!;
  while (<F>) { o($_); }
  F->error and die;
  close F;
  ol('```');
  ol();
}

#---------- input scanning ----------

our @output_files;
our $comment_re = qr{^\Q[comment]:};
our $fancy_pre_indiv = 0;
our $fancy_pre_rowspan = 0;

my $lt= 'BGNUu8OOK7UPtX3H';
my $rt= 'smPE0doaBMjrKFYg';
my $q = 'uXlUyLF01W1H72NS';
my $bs= 'OlY2yMns1zQ84wyF';
my $lb= 'IX9Zl6Lbd6F9RgYs';
my $rb= '1hTgD8bayWOmHqSY';

my %fancypre_markdown = ("var" => "${lt}var${rt}%s${lt}/var${rt}");
my %fancypre_pandoc = ("var" => "${bs}textit${lt}%s${rt}");

sub translate_fancypre_markup(\%$) {
  my ($markup, $text) = @_;
  $text =~ s{\%(\w*\.*|\[|\]|)\%}{
    length $1 ? sprintf $markup->{var}, $1 : '%'
  }eg;
  return $text;
}

sub scan_filter() {
  foreach my $chap (@chapters) {
    if (stat "$src/$chap.rst") { warn "$chap still RST!"; next; }

    my @csections;

    my $leaf = "$chap.md";

    open MD, "> mdbook/$leaf.tmp" or die $!;
    open PD, "> pandoc/$leaf.tmp" or die $!;
    push @output_files, "mdbook/$leaf",
                        "pandoc/$leaf";

    open C, "$src/$leaf" or die "$src/$leaf $!";
    my $last_l;
    while (<C>) {
      if (m{^\%\!fancy-pre\s*$} .. m{^\%/fancy-pre\s*$}) {
	if (m{^\%([/!])}) {
	  $fancy_pre_indiv = 0;
	  printf PD "${bs}%s${lt}fancypre${rt}\n",
		    $1 eq "!" ? "begin" : "end";
	  next;
	}
	if (m{^\`\`\`} || !m{\S}) {
	  if ($fancy_pre_indiv) {
	    print MD "${lt}/table${rt}\n\n";
	    $fancy_pre_indiv = 0;
	  }
	}
	if (m{^\`\`\`}) {
	  next;
	}
	if (m{\S}) {
	  if (!$fancy_pre_indiv++) {
	    print MD "\n${lt}table class=${q}fancy-pre${q}${rt}\n";
	    print PD "${bs}fancypregap\n";
	  }
	  my ($lhs, $rhs) = m{\s+//[ \t]*?} ? ($`,$') : ($_, undef);
	  print MD "${lt}tr${rt}${lt}td";
	  if ($fancy_pre_rowspan) {
	    die "$fancy_pre_rowspan ?" if $rhs;
	    $fancy_pre_rowspan--;
	  } else {
	    print MD " colspan=${q}2${q}" if !defined $rhs;
	  }
	  print MD "${rt}${lt}code class=${q}hljs${q}${rt}\n",
	           translate_fancypre_markup(%fancypre_markdown, $lhs),
	           "${lt}/code${rt}${lt}/td${rt}";
	  print PD "${bs}fancypreleft ",
		   "\`",
		   translate_fancypre_markup(%fancypre_pandoc, $lhs),
		   "\`\n";
	  if (defined $rhs) {
	    print MD "${lt}td";
	    print PD "${bs}fancypreright";
	    if ($rhs =~ s{^\s*\%\#\.(\d+)\s*}{}) {
	      print MD " rowspan=$q$1$q";
	      print PD "${lb}$1${rb}";
	      $fancy_pre_rowspan = $1-1;
	    }
	    print MD "${rt}\n",
	              translate_fancypre_markup(%fancypre_markdown, $rhs),
	              "${lt}/td${rt}";
	    print PD " ",
		     translate_fancypre_markup(%fancypre_pandoc, $rhs),
		     "\n";
	  }
	  print MD "${lt}/tr${rt}\n";
	}
	next;
      }

      if (!m{$comment_re}) {
	print MD;
	print PD;
      }

      if (!m/\S/ && defined($last_l) && $last_l =~ m{$comment_re}) {
	autogen_any("$src/$leaf", sub {
	  print MD md_comment($_[0]), "\n";
	  print PD pd_comment($_[0]), "\n";
	});
	print MD "\n";
	print PD "\n";
      }

      s{\s+$}{};
      # Extract section headings
      my $new_last_l;
      if (m{^---+$} || m{^===+$}) {
	my $level = 0 + !!m{^---};
	push @csections, [ $level, $leaf, ($last_l // die) ];
      } elsif (m{^(\#+) (\S.*\S)}) {
	my $level = -1 + length $1;
	push @csections, [ $level, $leaf, $2 ];
      } else {
	die if $.==2;
	$new_last_l = $_;
      }
      $last_l = $new_last_l;
    }
    C->error and die $!;

    if ($leaf eq 'colophon.md') {
      my $git_commit = `git rev-parse HEAD` || die "$? $!";
      chomp $git_commit;
      $?=0; $!=0; my $status = `git status --porcelain`;
      die "$? $!" if $? || $!;

      foreach my $fh (qw(MD PD)) {
	open O, ">&$fh" or die $!;
	append_to_colophon('LICENCE',
			   'Full copyright notice');
	append_to_colophon('DEVELOPER-CERTIFICATE',
			   'Developer Certificate of Origin');
	ol("---");
	ol("formatted ".
	   strftime("%Y-%m-%d %H:%M:%S UTC", gmtime time));
	ol();
	ol("git commit `$git_commit`".
	   (length($status) ? "; tree dirty" : ""));
	close O or die $!;
      }
    }

    print MD "\n\n$mdbook_refs" or die $!;
    die $! if MD->error;
    close MD or die $!;

    die $! if PD->error;
    close PD or die $!;

    push @sections, @csections;
  }
}

#---------- machinery and main program ----------

sub md_comment ($) { "[comment]: # ( $_[0] )" }
sub pd_comment ($) { "<!-- $_[0] -->" }

our $current_output_file;

sub start_output ($) {
  die if defined $current_output_file;
  $current_output_file = "$_[0]";
  open O, "> $current_output_file.tmp" or die "$current_output_file.tmp $!";
}
sub o {
  print O @_ or die $!;
}
sub ol {
  o(@_);
  o("\n");
}
sub autogen_any ($$) {
  my ($instead, $f) = @_;
  foreach my $l ("*** WARNING - AUTOGENERATED FILE ***",
		 "*** EDIT $instead INSTEAD ***",
		 "",
		 (split /\n/, $copyright),
		 ) {
    my $l = $l;
    $l =~ s/^\s+//;
    $l =~ s/\s+$//;
    $l = sprintf "%-60s", $l;
    $f->($l);
  }
}
sub o_autogen {
  ol();
  autogen_any($0, sub { ol(md_comment($_[0])) });
  ol();
}

sub end_output () {
  die unless defined $current_output_file;
  close O or die $!;
  push @output_files, $current_output_file;
  $current_output_file = undef;
}

sub install_outputs () {
  foreach my $o (@output_files) {
    rename "$o.tmp", $o or die "$o $!";
  }
}

sub make_link ($$) {
  my ($from, $to) = @_;
  symlink $from, "$to.tmp" or die "symlink $to -> $from: $!";
  push @output_files, $to;
}

sub make_links () {
  make_link "../src/precontents.md", "pandoc/precontents.md";
}

die unless @ARGV;
die if $ARGV[0] =~ m/^-/;
@chapters = @ARGV;

foreach my $sd (qw(mdbook pandoc)) {
  mkdir $sd or $!==EEXIST or die $!;
}
scan_filter();
summary();
contents();
autorefs();
make_links();
install_outputs();
